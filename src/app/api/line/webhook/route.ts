// app/api/line/webhook/route.ts

import {
  MessageAPIResponseBase,
  WebhookEvent,
  TextMessage,
  FollowEvent,
  MessageEvent,
} from "@line/bot-sdk";
import { NextResponse } from "next/server";

// 1. Import clients from the lib folder
import { lineClient } from "@/lib/line";
import { supabaseAdmin } from "@/lib/supabase";


// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢
const MOOD_OPTIONS = ["üòÑ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°", "üòä ‡∏™‡∏∏‡∏Ç‡πÉ‡∏à", "üòê ‡πÄ‡∏â‡∏¢‡πÜ", "üò¢ ‡πÄ‡∏®‡∏£‡πâ‡∏≤", "üò† ‡πÇ‡∏Å‡∏£‡∏ò"];
// =================================================================
// 2. Event Handlers (No changes in logic, just using imported clients)
// =================================================================

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° (‡πÅ‡∏≠‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô)
 * @param event - The FollowEvent object from LINE.
 */
const handleFollowEvent = async (event: FollowEvent): Promise<MessageAPIResponseBase | void> => {
  const userId = event.source.userId;
  if (!userId) {
    console.error("Follow event is missing userId.");
    return;
  }

  try {
    const profile = await lineClient.getProfile(userId);

    // ‡πÉ‡∏ä‡πâ supabaseAdmin ‡∏ó‡∏µ‡πà import ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    const { error } = await supabaseAdmin.from("profiles").insert({
      id: userId,
      display_name: profile.displayName,
    });

    if (error) {
      console.error("Error inserting profile to Supabase:", error);
      return;
    }

    console.log(`User ${profile.displayName} (${userId}) has been registered.`);

    const welcomeMessage: TextMessage = {
      type: "text",
      text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${profile.displayName}!\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`,
    };
    await lineClient.replyMessage(event.replyToken, welcomeMessage);

  } catch (error) {
    console.error("Error handling follow event:", error);
  }
};

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 * @param event - The MessageEvent object from LINE.
 */
const handleMessageEvent = async (event: MessageEvent): Promise<MessageAPIResponseBase | void> => {
  if (event.message.type !== "text") {
    return;
  }

  const userId = event.source.userId;
  const userMessage = event.message.text.trim();
  
  if (!userId) {
    console.error("Message event is missing userId.");
    return;
  }

  try {
    if (userMessage.toLowerCase() === "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå") {
      // TODO: ‡∏™‡πà‡∏á Quick Reply ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå
      const reply: TextMessage = {
        type: "text",
        text: "‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå Quick Reply ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö!",
      };
      await lineClient.replyMessage(event.replyToken, reply);

    } else if (userMessage.toLowerCase() === "‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ") {
      // TODO: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
      const reply: TextMessage = {
        type: "text",
        text: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö)",
      };
      await lineClient.replyMessage(event.replyToken, reply);

    } else if (userMessage.startsWith("mood:")) {
      const mood = userMessage.split(":")[1];
      
      // ‡πÉ‡∏ä‡πâ supabaseAdmin ‡∏ó‡∏µ‡πà import ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
      const { error } = await supabaseAdmin.from("moods").insert({
        user_id: userId,
        mood: mood,
        note: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${mood}`
      });

      if (error) {
        throw new Error(`Supabase insert error: ${error.message}`);
      }
      
      const reply: TextMessage = {
        type: "text",
        text: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå "${mood}" ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö!`,
      };
      await lineClient.replyMessage(event.replyToken, reply);

    } else {
      const reply: TextMessage = {
        type: "text",
        text: '‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠ "‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏Ñ‡∏£‡∏±‡∏ö',
      };
      await lineClient.replyMessage(event.replyToken, reply);
    }
  } catch (error) {
    console.error("Error handling message event:", error);
    await lineClient.replyMessage(event.replyToken, {
      type: "text",
      text: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á",
    });
  }
};

// =================================================================
// 3. Main Webhook Handler (POST Request)
// =================================================================
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const events: WebhookEvent[] = body.events;

    // TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Signature ‡πÉ‡∏ô Production

    if (!events || events.length === 0) {
      return NextResponse.json({ success: true, message: "No events to process" });
    }

    const results = await Promise.all(
      events.map(async (event) => {
        switch (event.type) {
          case "follow":
            return handleFollowEvent(event as FollowEvent);
          case "message":
            return handleMessageEvent(event as MessageEvent);
          default:
            console.log(`Unhandled event type: ${event.type}`);
            return Promise.resolve(null);
        }
      })
    );
    
    return NextResponse.json({ success: true, results });

  } catch (error) {
    console.error("Webhook Error:", error);
    const errorMessage = error instanceof Error ? error.message : "Unknown error";
    return new NextResponse(`Webhook Error: ${errorMessage}`, { status: 500 });
  }
}
